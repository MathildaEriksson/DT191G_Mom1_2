@inject HttpClient Http
@using System.Text.Json.Serialization

@if (pokemon == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="pokemon-fact">
        <h3>Random Pok√©mon</h3>
        <img src="@pokemon.Sprites?.FrontDefault" alt="@pokemon.Name" />
        <h4>@(CapitalizeFirstLetter(pokemon.Name ?? "Unknown"))</h4>
        <p>Type: @string.Join(", ", pokemon.Types?.Select(t => t.Type.Name) ?? new List<string>())</p>
        <p>Abilities: @string.Join(", ", pokemon.Abilities?.Select(a => a.Ability.Name) ?? new List<string>())</p>
    </div>
}

@code {
    private Pokemon? pokemon;
    private const int MaxPokemonId = 151;

    protected override async Task OnInitializedAsync()
    {
        Random rnd = new Random();
        int randomId = rnd.Next(1, MaxPokemonId + 1);
        pokemon = await Http.GetFromJsonAsync<Pokemon>($"https://pokeapi.co/api/v2/pokemon/{randomId}");
    }

        private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        // Capitalize the first letter and concatenate the rest of the string
        return input[0].ToString().ToUpper() + input.Substring(1);
    }

    public class Pokemon
    {
        public string? Name { get; set; }
        public Sprites? Sprites { get; set; }
        public List<PokemonType>? Types { get; set; }
        public List<PokemonAbility>? Abilities { get; set; }
    }

    public class Sprites
    {
        [JsonPropertyName("front_default")]
        public string? FrontDefault { get; set; }
    }

    public class PokemonType
    {
        public TypeDetail? Type { get; set; }
    }

    public class TypeDetail
    {
        public string? Name { get; set; }
    }

    public class PokemonAbility
    {
        public AbilityDetail? Ability { get; set; }
    }

    public class AbilityDetail
    {
        public string? Name { get; set; }
    }
}
